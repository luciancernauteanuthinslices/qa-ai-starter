name: QA AI Pipeline (stories → tests → UI/API/k6 → summary)

on:
  pull_request:
    paths:
      - "stories/**"
      - "tests/**"
      - "scripts/**"
      - "playwright.config.*"
      - "package.json"
      - "tsconfig.json"
  push:
    branches: [ main, master ]
    paths:
      - "stories/**"
      - "tests/**"
      - "scripts/**"
      - "playwright.config.*"
      - "package.json"
      - "tsconfig.json"
  schedule:
    # Nightly (L-V) pentru detectare automata de regresii
    - cron: "0 1 * * 1-5"
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: qa-ai-pipeline-${{ github.ref }}
  cancel-in-progress: true

jobs:
  generate-and-test:
    runs-on: ubuntu-latest
    env:
      BASE_URL: ${{ vars.BASE_URL || 'https://opensource-demo.orangehrmlive.com' }}
      TEST_USERNAME: ${{ secrets.USERNAME || 'Admin' }}
      TEST_PASSWORD: ${{ secrets.PASSWORD || 'admin123' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm

      - name: Install deps
        run: |
          npm ci
          npx playwright install --with-deps


      - name: Prepare .env file
        run: |
          echo "BASE_URL=${BASE_URL}" > .env
          echo "USERNAME=${USERNAME}" >> .env
          echo "PASSWORD=${PASSWORD}" >> .env
          echo "BASELINE_TEST_CASE_AUTHORING_MIN=30" >> .env
          echo "AI_AUTOMATION_RATE=30" >> .env
          echo "K6_VUS=10" >> .env
          echo "K6_DURATION=30s" >> .env

      # 1) stories → features → specs
      - name: Generate tests from stories
        run: npm run pipeline:story-to-spec

      # 2) Ruleaza testele UI
      - name: Run UI tests (Playwright)
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            npx playwright test -g "@smoke|@ui"
          else
            npx playwright test
          fi

      # 3) Ruleaza testele API
      - name: Run API tests (Playwright request)
        run: |
          if [ -d "tests/api" ]; then
            npx playwright test tests/api
          else
            echo "No tests/api folder, skipping API suite."
            fi
      # 4) k6 perf smoke
      - name: Setup k6
        uses: grafana/setup-k6-action@v1

      - name: Prepare perf folder
        run: mkdir -p reports/performance

      - name: Run k6 smoke
        uses: grafana/run-k6-action@v1
        with:
          path: scripts/k6/load_test.js
          flags: --vus 10 --duration 30s --out json=reports/performance/k6.json
        env:
          BASE_URL: ${{ env.BASE_URL }}

      # 5) Diffs + Summary
      - name: Visual & API diffs + Summary
        run: |
          mkdir -p reports/ui reports/api reports/summaries metrics
          npm run diff:ui || true
          npm run diff:api || true
          npm run report:summary
          npm run report:kpi

      - name: Upload artifacts (Playwright report, diffs, k6, summaries)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: qa-artifacts
          path: |
            playwright-report/**
            test-results/**
            reports/**
            metrics/**
            visual-baseline/**

      - name: Post Job Summary (Markdown)
        if: always()
        run: |
          echo "## QA Summary" >> $GITHUB_STEP_SUMMARY
          if [ -f reports/summaries/last.md ]; then
            cat reports/summaries/last.md >> $GITHUB_STEP_SUMMARY
          else
            echo "No summary generated." >> $GITHUB_STEP_SUMMARY
          fi
